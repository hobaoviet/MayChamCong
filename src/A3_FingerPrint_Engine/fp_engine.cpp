#include "fp_engine.hpp"
#include <SPIFFS.h> // ƒë·ªÉ l∆∞u map slot v√†o flash
static uint8_t storeModelFixed(Adafruit_Fingerprint &finger, uint16_t id);

namespace fp_engine
{

  // =====================
  // AUTH n·ªôi b·ªô
  // =====================
  static uint32_t lastPoll = 0;
  static uint32_t pollInterval = 100;

  // =====================
  // ENROLL n·ªôi b·ªô
  // =====================
  static EnrollState st = EnrollState::Idle;
  static uint16_t stSlot = 0;
  static uint32_t stT0 = 0;
  static uint32_t stepTimeoutMs = 20000; // 20s/b∆∞·ªõc
  static bool stChanged = false;

  // =====================
  // SLOT MANAGEMENT n·ªôi b·ªô
  // =====================
  static bool usedSlots[256]; // 1 = ƒë√£ d√πng, 0 = tr·ªëng
  static const char *SLOT_FILE = "/fp_slots.bin";

  // ---------------------
  // Helpers
  // ---------------------
  static void _enter(EnrollState s)
  {
    st = s;
    stT0 = millis();
    stChanged = true;
  }

  static bool _timeout()
  {
    return (millis() - stT0) > stepTimeoutMs;
  }

  static void _clearFpBuffer()
  {
    Adafruit_Fingerprint &finger = hal::finger();
    finger.getImage();  // clear image buffer
    finger.image2Tz(1); // clear charBuffer1
    finger.image2Tz(2); // clear charBuffer2
  }

  static void _flushEnrollBuffers()
  {
    Adafruit_Fingerprint &finger = hal::finger();
    // √âp chuy·ªÉn r·ªóng v√†o buffer ƒë·ªÉ clear
    finger.getImage();
    finger.image2Tz(1);
    finger.image2Tz(2);
    delay(200);
    Serial.println("[FP] Flush enroll buffers done");
  }

  // ---------------------
  // Qu·∫£n l√Ω map slot
  // ---------------------
  static void _saveSlotMap()
  {
    if (!SPIFFS.begin(true))
      return;
    File f = SPIFFS.open(SLOT_FILE, FILE_WRITE);
    if (!f)
      return;
    f.write((uint8_t *)usedSlots, sizeof(usedSlots));
    f.close();
  }

  static void _loadSlotMap()
  {
    if (!SPIFFS.begin(true))
    {
      Serial.println("[FP] SPIFFS mount failed");
      return;
    }
    File f = SPIFFS.open(SLOT_FILE, FILE_READ);
    if (!f)
    {
      memset(usedSlots, 0, sizeof(usedSlots));
      return;
    }
    f.read((uint8_t *)usedSlots, sizeof(usedSlots));
    f.close();
  }

  /**
   * @brief S·ª¨A L·ªñI: H√†m t√¨m slot tr·ªëng ƒë∆∞·ª£c l√†m l·∫°i ƒë·ªÉ an to√†n h∆°n.
   *
   * 1. Duy·ªát nhanh qua m·∫£ng `usedSlots` trong RAM. N·∫øu t√¨m th·∫•y slot tr·ªëng, tr·∫£ v·ªÅ ngay.
   * ƒê√¢y l√† tr∆∞·ªùng h·ª£p ph·ªï bi·∫øn v√† nhanh nh·∫•t.
   * 2. N·∫øu sau khi duy·ªát m·∫£ng RAM m√† kh√¥ng th·∫•y slot tr·ªëng (ho·∫∑c m·∫£ng b·ªã sai),
   * th·ª±c hi·ªán qu√©t l·∫°i to√†n b·ªô c·∫£m bi·∫øn ƒë·ªÉ ƒë·ªìng b·ªô h√≥a tr·∫°ng th√°i th·ª±c t·∫ø.
   * 3. Trong qu√° tr√¨nh qu√©t, n√≥ s·∫Ω c·∫≠p nh·∫≠t l·∫°i m·∫£ng `usedSlots` v√† t√¨m ra slot tr·ªëng ƒë·∫ßu ti√™n.
   * 4. L∆∞u l·∫°i b·∫£n ƒë·ªì slot ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô ƒë·ªÉ c√°c l·∫ßn g·ªçi sau nhanh h∆°n.
   */
  static int _findFreeSlot()
  {
    Adafruit_Fingerprint &finger = hal::finger();
    int cap = finger.capacity > 0 ? finger.capacity : 255;

    // --- B∆∞·ªõc 1: Duy·ªát nhanh qua b·∫£n ƒë·ªì slot trong RAM ---
    for (int i = 1; i <= cap; i++)
    {
      if (!usedSlots[i])
      {
        Serial.printf("[FP][_findFreeSlot]  Found potential free slot in RAM map: %d\n", i);
        // X√°c th·ª±c l·∫°i v·ªõi c·∫£m bi·∫øn ƒë·ªÉ ch·∫Øc ch·∫Øn 100%
        if (finger.loadModel(i) != FINGERPRINT_OK)
        {
          return i;
        }
        else
        {
          // N·∫øu RAM n√≥i tr·ªëng nh∆∞ng c·∫£m bi·∫øn l·∫°i b√°o ƒë√£ d√πng -> ƒë·ªìng b·ªô l·∫°i
          Serial.printf("[FP][_findFreeSlot]  RAM map mismatch. Slot %d is actually used. Syncing.\n", i);
          usedSlots[i] = true;
        }
      }
    }

    // --- B∆∞·ªõc 2: N·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c map b·ªã sai, qu√©t l·∫°i to√†n b·ªô c·∫£m bi·∫øn ---
    Serial.println("[FP][_findFreeSlot] RAM map is full or out of sync. Rescanning sensor to find free slot...");
    delay(500); // Cho c·∫£m bi·∫øn th·ªùi gian ngh·ªâ tr∆∞·ªõc khi qu√©t h√†ng lo·∫°t

    bool mapChanged = false;
    int foundSlot = -1;

    finger.getTemplateCount(); // C·∫≠p nh·∫≠t l·∫°i t·ªïng s·ªë v√¢n tay
    Serial.printf("[FP][_findFreeSlot] Sensor reports %d templates / capacity=%d\n", finger.templateCount, cap);

    for (int i = 1; i <= cap; i++)
    {
      bool isUsedOnSensor = (finger.loadModel(i) == FINGERPRINT_OK);

      // N·∫øu tr·∫°ng th√°i tr√™n sensor kh√°c v·ªõi trong RAM, c·∫≠p nh·∫≠t l·∫°i RAM
      if (usedSlots[i] != isUsedOnSensor)
      {
        usedSlots[i] = isUsedOnSensor;
        mapChanged = true;
      }

      // N·∫øu t√¨m th·∫•y slot tr·ªëng trong l√∫c qu√©t, l∆∞u l·∫°i v√† tho√°t s·ªõm
      if (!isUsedOnSensor && foundSlot == -1)
      {
        foundSlot = i;
      }
    }

    if (mapChanged)
    {
      Serial.println("[FP][_findFreeSlot] Slot map has been resynced with sensor.");
      _saveSlotMap(); // L∆∞u l·∫°i b·∫£n ƒë·ªì slot v·ª´a ƒë∆∞·ª£c ƒë·ªìng b·ªô
    }

    if (foundSlot != -1)
    {
      Serial.printf("[FP][_findFreeSlot]  Found free slot via full scan: %d\n", foundSlot);
    }
    else
    {
      Serial.println("[FP][_findFreeSlot]  No free slot found after full scan!");
    }

    return foundSlot;
  }

  // =====================
  // AUTH PUBLIC
  // =====================
  bool begin()
  {
    Adafruit_Fingerprint &finger = hal::finger();

    if (finger.verifyPassword())
    {
      Serial.println(F("[FP] Sensor AS608 found & verified."));

  
      finger.getTemplateCount();
      if (finger.templateCount > finger.capacity)
      {
        Serial.printf("[FP]  Invalid template count %d, forcing resync...\n", finger.templateCount);
        finger.emptyDatabase();
        finger.getTemplateCount();
      }

      // --- Load slot map hi·ªán t·∫°i (n·∫øu c√≥) ---
      _loadSlotMap();

      //  Qu√©t l·∫°i th·ª±c t·∫ø tr√™n sensor ƒë·ªÉ ƒë·ªìng b·ªô usedSlots[]
      if (finger.getTemplateCount() == FINGERPRINT_OK)
      {
        int total = finger.templateCount;
        Serial.printf("[FP] Sensor reports %d templates\n", total);

        memset(usedSlots, 0, sizeof(usedSlots));
        int cap = finger.capacity > 0 ? finger.capacity : 255;
        for (int i = 1; i <= cap; i++)
        {
          int p = finger.loadModel(i);
          usedSlots[i] = (p == FINGERPRINT_OK);
        }
        _saveSlotMap();
        Serial.println("[FP] Slot map resynced with sensor");
      }

      return true;
    }
    else
    {
      Serial.println(F("[FP] Fingerprint sensor not found / wrong password."));
      return false;
    }
  }

  fp_engine::AuthResult poll()
  {
    static bool hadFinger = false; // nh·ªõ xem l·∫ßn tr∆∞·ªõc c√≥ tay kh√¥ng
    AuthResult r;

    if (isEnrolling())
      return r;

    uint32_t now = millis();
    if (now - lastPoll < pollInterval)
      return r;
    lastPoll = now;

    Adafruit_Fingerprint &finger = hal::finger();
    uint8_t p = finger.getImage();

    // ========== KH√îNG C√ì NG√ìN N√ÄO ==========
    if (p == FINGERPRINT_NOFINGER)
    {
      hadFinger = false;
      return r;
    }

    // ========== V·ª™A C√ì NG√ìN TAY M·ªöI ==========
    if (!hadFinger)
    {
      // ch·ªâ x·ª≠ l√Ω khi tay v·ª´a m·ªõi ƒë·∫∑t
      hadFinger = true;

      // l·∫•y h√¨nh ·∫£nh
      if (p != FINGERPRINT_OK)
      {
        r.hasResult = true;
        r.ok = false;
        r.user_id = "UNKNOWN";
        r.reason = "image_error";
        r.t_ms = now;
        return r;
      }

      // chuy·ªÉn ·∫£nh sang template
      p = finger.image2Tz();
      if (p != FINGERPRINT_OK)
      {
        r.hasResult = true;
        r.ok = false;
        r.user_id = "UNKNOWN";
        r.reason = "image2Tz_fail";
        r.t_ms = now;
        return r;
      }

      // t√¨m trong DB
      p = finger.fingerFastSearch();
      r.hasResult = true;
      r.t_ms = now;
      if (p == FINGERPRINT_OK)
      {
        r.ok = true;
        r.fingerId = finger.fingerID;
        r.user_id = "FP_" + String(finger.fingerID);
        r.confidence = finger.confidence;
      }
      else
      {
        r.ok = false;
        r.fingerId = -1;
        r.user_id = "UNKNOWN";
        r.confidence = -1;
        r.reason = "not_found";
      }

      return r;
    }

    // ========== ƒêANG GI·ªÆ TAY TR√äN C·∫¢M BI·∫æN ==========
    // n·∫øu ng∆∞·ªùi d√πng ch∆∞a nh·∫•c tay l√™n, b·ªè qua ƒë·ªÉ kh√¥ng spam li√™n t·ª•c
    return r;
  }
  ////////////////
  void setPollInterval(uint32_t ms) { pollInterval = ms; }

  int verifyFingerprint()
  {
    Adafruit_Fingerprint &finger = hal::finger();
    uint8_t p = finger.getImage();
    if (p != FINGERPRINT_OK)
      return -1;

    p = finger.image2Tz();
    if (p != FINGERPRINT_OK)
      return -1;

    p = finger.fingerFastSearch();
    if (p == FINGERPRINT_OK)
      return finger.fingerID;
    return -1;
  }

  // =====================
  // ENROLL PUBLIC
  // =====================
  bool startEnroll(uint16_t slotId)
  {
    if (st != EnrollState::Idle)
      return false;

    Adafruit_Fingerprint &finger = hal::finger();

    // üîπ D·ªçn s·∫°ch b·ªô ƒë·ªám tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu enroll m·ªõi
    _clearFpBuffer();
    delay(300);
    Serial.println("[FP] Cleared sensor buffers before starting new enroll");

    // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh ID, t·ª± t√¨m slot tr·ªëng
    if (slotId == 0)
    {
      int freeSlot = _findFreeSlot();
      if (freeSlot < 0)
      {
        Serial.println("[FP][ENROLL] No free slot available!");
        return false;
      }
      slotId = static_cast<uint16_t>(freeSlot);
    }

    stSlot = slotId;
    _enter(EnrollState::WaitFinger1);
    Serial.printf("[FP][ENROLL] Start for slot %u\n", stSlot);
    return true;
  }

  fp_engine::EnrollStatus updateEnroll()
  {
    EnrollStatus out;
    out.changed = false;
    out.state = st;
    out.slot = stSlot;

    if (st == EnrollState::Idle)
    {
      out.message = "Idle";
      return out;
    }

    Adafruit_Fingerprint &finger = hal::finger();

    auto setMsg = [&](const char *m)
    {
      out.changed = stChanged;
      out.state = st;
      out.slot = stSlot;
      out.message = m;
      stChanged = false;
    };

    switch (st)
    {
    case EnrollState::WaitFinger1:
    {
      if (_timeout())
      {
        _enter(EnrollState::Timeout);
        setMsg("Timeout finger #1");
        break;
      }
      uint8_t p = finger.getImage();
      if (p == FINGERPRINT_OK)
      {
        _enter(EnrollState::Capture1);
        setMsg("Capturing #1...");
      }
      else
      {
        setMsg("Place finger #1");
      }
    }
    break;

    case EnrollState::Capture1:
    {
      uint8_t p = finger.image2Tz(1);
      if (p == FINGERPRINT_OK)
      {
        _enter(EnrollState::RemoveFinger1);
        setMsg("Remove finger");
      }
      else
      {
        _enter(EnrollState::DoneFail);
        out.reason = "image2Tz1_fail";
        setMsg("Fail convert #1");
      }
    }
    break;

    case EnrollState::RemoveFinger1:
    {
      if (_timeout())
      {
        _enter(EnrollState::Timeout);
        setMsg("Timeout remove");
        break;
      }
      uint8_t p = finger.getImage();
      if (p == FINGERPRINT_NOFINGER)
      {
        _enter(EnrollState::WaitFinger2);
        setMsg("Place finger #2");
      }
      else
      {
        setMsg("Lift finger off");
      }
    }
    break;

    case EnrollState::WaitFinger2:
    {
      if (_timeout())
      {
        _enter(EnrollState::Timeout);
        setMsg("Timeout finger #2");
        break;
      }
      uint8_t p = finger.getImage();
      if (p == FINGERPRINT_OK)
      {
        _enter(EnrollState::Capture2);
        setMsg("Capturing #2...");
      }
      else
      {
        setMsg("Place finger #2");
      }
    }
    break;

    case EnrollState::Capture2:
    {
      uint8_t p = finger.image2Tz(2);
      if (p == FINGERPRINT_OK)
      {
        _enter(EnrollState::CreateModel);
        setMsg("Creating model...");
      }
      else
      {
        _enter(EnrollState::DoneFail);
        out.reason = "image2Tz2_fail";
        setMsg("Fail convert #2");
      }
    }
    break;

    case EnrollState::CreateModel:
    {
      uint8_t p = finger.createModel();
      if (p == FINGERPRINT_OK)
      {
        _enter(EnrollState::StoreModel);
        setMsg("Storing model...");
      }
      else
      {
        _enter(EnrollState::DoneFail);
        out.reason = "createModel_fail";
        setMsg("Fail create model");
      }
    }
    break;

    case EnrollState::StoreModel:
    {
      uint8_t p = storeModelFixed(finger, stSlot);
      if (p == FINGERPRINT_OK)
      {
        usedSlots[stSlot] = true;
        _saveSlotMap();

        //  Force flush to√†n b·ªô buffer (2 char buffers + image)
        _clearFpBuffer();
        delay(300);
        Serial.println("[FP] Flushed buffers after storeModel");

        //  Re-sync template count v·ªõi sensor (ƒë·ªìng b·ªô slot)
        finger.getTemplateCount();
        delay(100);

        _enter(EnrollState::DoneOK);
        setMsg("Enroll OK");
      }
      else
      {
        _enter(EnrollState::DoneFail);
        out.reason = "storeModel_fail";
        setMsg("Fail store model");
      }
    }
    break;

    case EnrollState::DoneOK:
    {
      setMsg("Done OK");
      usedSlots[stSlot] = true; // ƒê·∫£m b·∫£o slot ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ d√πng

      //  FLUSH BUFFER trong RAM c·ªßa c·∫£m bi·∫øn ƒë·ªÉ xo√° ·∫£nh c≈©
      _clearFpBuffer();
      delay(300);
      Serial.println("[FP] Flushed buffers after DoneOK");

      //  Refresh l·∫°i danh s√°ch template (ƒë·ªìng b·ªô slot th·ª±c t·∫ø)
      finger.getTemplateCount();
      delay(100);
      Serial.printf("[FP] Template count resynced = %d\n", finger.templateCount);

      // Gi·ªØ nguy√™n stSlot ƒë·ªÉ scheduler l·∫•y ID th·∫≠t
      out.slot = stSlot;
      // C·∫≠p nh·∫≠t l·∫°i b·∫£n ƒë·ªì slot m·ªôt l·∫ßn n·ªØa cho ch·∫Øc
      _saveSlotMap();

      st = EnrollState::Idle;
      stChanged = true;

      Serial.printf("[FP][ENROLL] Finished OK at slot %u\n", stSlot);
      Serial.printf("[FP] Total templates now = %d\n", finger.templateCount);
      break;
    }
    case EnrollState::DoneFail:
      setMsg("Enroll FAIL");
      _clearFpBuffer();
      // ph√≤ng h·ªù build c≈© t·ª´ng ƒë√°nh d·∫•u s·ªõm:
      if (stSlot > 0)
      {
        usedSlots[stSlot] = false;
        _saveSlotMap();
      }
      stSlot = 0;
      _enter(EnrollState::Idle);
      break;

    case EnrollState::Cancelled:
      setMsg("Cancelled");
      _clearFpBuffer();
      // ƒë√£ gi·∫£i ph√≥ng trong cancelEnroll(), nh∆∞ng reset slot cho ch·∫Øc:
      stSlot = 0;
      _enter(EnrollState::Idle);
      break;

    case EnrollState::Timeout:
      setMsg("Timeout");
      _clearFpBuffer();
      // ph√≤ng h·ªù build c≈©:
      if (stSlot > 0)
      {
        usedSlots[stSlot] = false;
        _saveSlotMap();
      }
      stSlot = 0;
      _enter(EnrollState::Idle);
      break;
    default:
      break;
    }

    return out;
  }

  void cancelEnroll()
  {
    if (st != EnrollState::Idle)
    {
      _enter(EnrollState::Cancelled);
      if (stSlot > 0)
      {
        usedSlots[stSlot] = false; // gi·∫£i ph√≥ng l·∫°i slot
        _saveSlotMap();
      }
      stSlot = 0;
      Serial.println("[FP][ENROLL] Cancelled by user");
    }
  }

  bool isEnrolling()
  {
    return (st != EnrollState::Idle &&
            st != EnrollState::DoneOK &&
            st != EnrollState::DoneFail &&
            st != EnrollState::Cancelled &&
            st != EnrollState::Timeout);
  }

  void setEnrollStepTimeout(uint32_t ms) { stepTimeoutMs = ms; }

  bool deleteFingerprint(uint16_t id)
  {
    Adafruit_Fingerprint &finger = hal::finger();
    uint8_t p = finger.deleteModel(id);
    if (p == FINGERPRINT_OK)
    {
      usedSlots[id] = false; // gi·∫£i ph√≥ng slot
      _saveSlotMap();
      Serial.printf("[FP] Deleted fingerprint ID %u\n", id);
      return true;
    }
    else
    {
      Serial.printf("[FP] Failed to delete fingerprint ID %u (code=%d)\n", id, p);
      return false;
    }
  }

  bool verifySensor()
  {
    return hal::finger().verifyPassword();
  }

  void clearAllFingerprints()
  {
    Adafruit_Fingerprint &finger = hal::finger();
    delay(1500); // ch·ªù c·∫£m bi·∫øn s·∫µn s√†ng

    if (!finger.verifyPassword())
    {
      Serial.println("[FP]  Sensor not found or wrong password.");
      return;
    }

    uint8_t p = finger.emptyDatabase();
    if (p == FINGERPRINT_OK)
    {
      Serial.println("[FP]  All fingerprints cleared successfully!");
    }
    else
    {
      Serial.printf("[FP]  Failed to clear database (code=%d)\n", p);
    }

    // ƒë·ªìng b·ªô l·∫°i map slot
    memset(usedSlots, 0, sizeof(usedSlots));
    _saveSlotMap();

    if (finger.getTemplateCount() == FINGERPRINT_OK)
    {
      Serial.printf("[FP] Sensor reports %d templates after clear.\n", finger.templateCount);
    }
  }

} // namespace fp_engine

static uint8_t storeModelFixed(Adafruit_Fingerprint &finger, uint16_t id)
{
  // Packet format cho l·ªánh 0x06 (STORETEMPLATE)
  uint8_t packetData[4];
  packetData[0] = 0x06;      // FINGERPRINT_STORETEMPLATE
  packetData[1] = 0x01;      // Buffer ID 1 (th∆∞·ªùng l√† buffer 1)
  packetData[2] = id >> 8;   // High byte
  packetData[3] = id & 0xFF; // Low byte

  Adafruit_Fingerprint_Packet packet(FINGERPRINT_COMMANDPACKET, sizeof(packetData), packetData);
  finger.writeStructuredPacket(packet);

  if (finger.getStructuredPacket(&packet) != FINGERPRINT_OK)
    return FINGERPRINT_PACKETRECIEVEERR;

  if (packet.type != FINGERPRINT_ACKPACKET)
    return FINGERPRINT_PACKETRECIEVEERR;

  return packet.data[0]; // 0 = OK
}
